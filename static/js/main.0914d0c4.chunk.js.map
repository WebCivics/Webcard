{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SERVICE_CONFIG","name","baseUrl","icon","_jsx","className","fill","viewBox","children","d","useAdpData","domain","profileData","setProfileData","useState","loading","setLoading","error","setError","fetchData","useCallback","async","dnsResponse","fetch","headers","ok","Error","status","dnsData","json","Answer","length","cidMatch","data","replace","match","cid","ipfsResponse","turtleText","text","parsedData","Promise","resolve","reject","store","Store","Parser","parse","quad","prefixes","addQuad","profile","ecash","properties","subjects","getSubjects","subject","getQuads","forEach","q","predicate","value","object","push","type","user","url","adpParser","err","console","useEffect","Loader","ErrorMessage","_ref","message","_jsxs","role","LinkButton","_ref2","href","target","rel","Profile","_ref3","src","charAt","alt","map","prop","PayButton","to","JsonView","_ref4","JSON","stringify","jsonData","DomainInput","_ref5","onDomainSubmit","inputValue","setInputValue","onSubmit","e","preventDefault","trim","onChange","placeholder","App","setDomain","view","setView","potentialDomain","window","location","pathname","split","filter","p","pop","queryParams","URLSearchParams","search","includes","has","submittedDomain","newPath","history","pushState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0914d0c4.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Parser, Store } from 'n3';\nimport { PayButton } from '@paybutton/react';\n\n// --- Configuration for Social Links ---\n// This object defines how to render different ADP properties.\nconst SERVICE_CONFIG = {\n    'https://webcivics.github.io/adp/ontdev/adp#hasLinkedinAccount': {\n        name: 'LinkedIn',\n        baseUrl: 'https://www.linkedin.com/in/',\n        icon: (\n            <svg className=\"w-6 h-6 mr-3\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z\" />\n            </svg>\n        )\n    },\n    'https://webcivics.github.io/adp/ontdev/adp#hasTwitterAccount': {\n        name: 'Twitter',\n        baseUrl: 'https://x.com/',\n        icon: (\n            <svg className=\"w-6 h-6 mr-3\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24h-6.617l-5.21-6.817-6.044 6.817h-3.308l7.73-8.805-7.993-10.69h6.77l4.61 6.245 5.46-6.245zm-1.161 17.52h1.839l-10.123-13.65h-1.990l10.274 13.65z\"/>\n            </svg>\n        )\n    }\n    // Add other services here in the future\n};\n\nconst NAME_PREDICATE = 'http://xmlns.com/foaf/0.1/name';\nconst DOMAIN_PREDICATE = 'https://schema.org/domain';\nconst ECASH_PREDICATE = 'https://webcivics.github.io/adp/ontdev/adp#hasEcashAccount';\n\n// --- Helper: ADP Parser Utility ---\nconst adpParser = (turtleText) => {\n    return new Promise((resolve, reject) => {\n        const store = new Store();\n        const parser = new Parser();\n        parser.parse(turtleText, (error, quad, prefixes) => {\n            if (error) return reject(error);\n            \n            if (quad) {\n                store.addQuad(quad);\n            } else {\n                // Parsing is complete\n                const profile = { name: null, domain: null, ecash: null, properties: [] };\n                const subjects = store.getSubjects(null, null, null);\n                if (subjects.length === 0) return reject(new Error(\"No subject found in RDF data.\"));\n                const subject = subjects[0];\n\n                const quads = store.getQuads(subject, null, null);\n                quads.forEach(q => {\n                    const predicate = q.predicate.value;\n                    const value = q.object.value;\n\n                    if (predicate === NAME_PREDICATE) {\n                        profile.name = value;\n                    } else if (predicate === DOMAIN_PREDICATE) {\n                        profile.domain = value;\n                    } else if (predicate === ECASH_PREDICATE) {\n                        profile.ecash = value;\n                    } else if (SERVICE_CONFIG[predicate]) {\n                        profile.properties.push({\n                            type: SERVICE_CONFIG[predicate].name,\n                            user: value,\n                            url: `${SERVICE_CONFIG[predicate].baseUrl}${value}`,\n                            icon: SERVICE_CONFIG[predicate].icon\n                        });\n                    }\n                });\n                resolve(profile);\n            }\n        });\n    });\n};\n\n// --- Custom Hook: useAdpData ---\nconst useAdpData = (domain) => {\n    const [profileData, setProfileData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchData = useCallback(async () => {\n        if (!domain) {\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setProfileData(null);\n\n        try {\n            // 1. Fetch DNS TXT record\n            const dnsResponse = await fetch(`https://cloudflare-dns.com/dns-query?name=_adp.${domain}&type=TXT`, {\n                headers: { 'accept': 'application/dns-json' },\n            });\n            if (!dnsResponse.ok) throw new Error(`DNS query failed with status: ${dnsResponse.status}`);\n            const dnsData = await dnsResponse.json();\n\n            if (!dnsData.Answer || dnsData.Answer.length === 0) {\n                throw new Error(`No ADP record found for ${domain}.`);\n            }\n            \n            const txtRecord = dnsData.Answer[0].data.replace(/\"/g, ''); // Clean quotes\n            const cidMatch = txtRecord.match(/dnslink=\\/ipfs\\/(\\S+)/); // More robust regex\n            if (!cidMatch || !cidMatch[1]) throw new Error(\"Could not find a valid IPFS CID in the DNS record.\");\n            const cid = cidMatch[1];\n\n            // 2. Fetch data from IPFS gateway\n            const ipfsResponse = await fetch(`https://ipfs.io/ipfs/${cid}`);\n            if (!ipfsResponse.ok) throw new Error(`IPFS fetch failed with status: ${ipfsResponse.status}`);\n            const turtleText = await ipfsResponse.text();\n\n            // 3. Parse the Turtle data\n            const parsedData = await adpParser(turtleText);\n            setProfileData(parsedData);\n\n        } catch (err) {\n            console.error(\"Error fetching ADP data:\", err);\n            setError(err);\n        } finally {\n            setLoading(false);\n        }\n    }, [domain]);\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData]);\n\n    return { profileData, loading, error };\n};\n\n// --- UI Components ---\n\nconst Loader = () => (\n    <div className=\"flex justify-center items-center p-10\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-white\"></div>\n    </div>\n);\n\nconst ErrorMessage = ({ message }) => (\n    <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-md\" role=\"alert\">\n        <p className=\"font-bold\">Error</p>\n        <p>{message}</p>\n    </div>\n);\n\nconst LinkButton = ({ type, url, icon }) => (\n    <a\n        href={url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"w-full bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-4 rounded-lg shadow-lg flex items-center justify-center transition-all duration-300 ease-in-out transform hover:scale-105\"\n    >\n        {icon || null}\n        <span>{type}</span>\n    </a>\n);\n\nconst Profile = ({ domain }) => {\n    const { profileData, loading, error } = useAdpData(domain);\n\n    if (loading) return <Loader />;\n    if (error) return <ErrorMessage message={error.message} />;\n    if (!profileData) return <ErrorMessage message=\"Could not load profile data.\" />;\n\n    return (\n        <div className=\"w-full max-w-md mx-auto p-6 md:p-8 bg-black/20 backdrop-blur-xl rounded-2xl shadow-2xl text-white text-center\">\n            <div className=\"mb-6\">\n                <img \n                    src={`https://placehold.co/128x128/764ba2/ffffff?text=${profileData.name ? profileData.name.charAt(0) : 'A'}`} \n                    alt=\"Profile\" \n                    className=\"w-32 h-32 rounded-full mx-auto border-4 border-white/50 shadow-lg\"\n                />\n                <h1 className=\"text-3xl font-bold mt-4\">{profileData.name || 'Anonymous'}</h1>\n                <p className=\"text-gray-300\">{profileData.domain}</p>\n            </div>\n\n            <div className=\"space-y-4 mb-6\">\n                {profileData.properties.map(prop => (\n                    <LinkButton key={prop.type} type={prop.type} url={prop.url} icon={prop.icon} />\n                ))}\n            </div>\n\n            {profileData.ecash && (\n                <div className=\"border-t border-white/20 pt-6\">\n                    <h2 className=\"text-lg font-semibold mb-3\">Support Me</h2>\n                    <div className=\"flex justify-center\">\n                        <PayButton to={profileData.ecash} text=\"Send a Tip\" />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst JsonView = ({ domain }) => {\n    const { profileData, loading, error } = useAdpData(domain);\n\n    if (loading) {\n        return <pre className=\"text-white bg-black/20 p-4 rounded-lg\">Loading...</pre>;\n    }\n    if (error) {\n        return <pre className=\"text-white bg-black/20 p-4 rounded-lg\">{JSON.stringify({ error: error.message }, null, 2)}</pre>;\n    }\n    \n    const jsonData = {\n        ecash: profileData?.ecash || null\n    };\n\n    return <pre className=\"text-white bg-black/20 p-4 rounded-lg\">{JSON.stringify(jsonData, null, 2)}</pre>;\n};\n\nconst DomainInput = ({ onDomainSubmit }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim()) {\n            onDomainSubmit(inputValue.trim());\n        }\n    };\n\n    return (\n        <div className=\"w-full max-w-md mx-auto p-8 bg-black/20 backdrop-blur-xl rounded-2xl shadow-2xl text-white text-center\">\n            <h1 className=\"text-4xl font-bold mb-4\">WebCard Viewer</h1>\n            <p className=\"text-lg mb-6\">Enter a domain to look up an Agent Discovery Profile.</p>\n            <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-2\">\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    placeholder=\"example.com\"\n                    className=\"flex-grow px-4 py-2 rounded-lg bg-white/20 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                />\n                <button type=\"submit\" className=\"bg-white/30 hover:bg-white/40 text-white font-bold py-2 px-6 rounded-lg transition-colors\">\n                    Look Up\n                </button>\n            </form>\n        </div>\n    );\n};\n\n// --- Main App Component ---\nfunction App() {\n    const [domain, setDomain] = useState(null);\n    const [view, setView] = useState('profile'); // 'profile' or 'ecash'\n\n    useEffect(() => {\n        // Get the full path and remove any leading/trailing slashes\n        const path = window.location.pathname.replace(/^\\/|\\/$/g, ''); \n        \n        // Split the path into segments\n        const pathParts = path.split('/').filter(p => p); \n        \n        // The domain should be the last part of the path\n        const potentialDomain = pathParts.pop(); \n\n        const queryParams = new URLSearchParams(window.location.search);\n\n        if (potentialDomain && potentialDomain.includes('.')) {\n            setDomain(potentialDomain);\n        }\n\n        if (queryParams.has('ecash')) {\n            setView('ecash');\n        } else {\n            setView('profile');\n        }\n    }, []);\n\n    const handleDomainSubmit = (submittedDomain) => {\n        // Construct the new path relative to the current page.\n        // This is more robust for GitHub pages deployment.\n        const newPath = `${window.location.pathname.replace(/[^/]*$/, '')}${submittedDomain}`;\n        window.history.pushState({}, '', newPath);\n        setDomain(submittedDomain);\n    };\n\n    // Main rendering logic\n    if (view === 'ecash') {\n        return (\n            <div className=\"min-h-screen flex items-center justify-center p-4\">\n                <JsonView domain={domain} />\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen flex flex-col items-center justify-center p-4\">\n            {domain ? <Profile domain={domain} /> : <DomainInput onDomainSubmit={handleDomainSubmit} />}\n            <footer className=\"text-center text-white/70 mt-8 text-sm\">\n                <p>Powered by WebCivics ADP</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Imports Tailwind CSS styles\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// This is the standard entry point for a React 17 application.\n// It finds the 'root' div in your public/index.html file and renders your main App component inside it.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}