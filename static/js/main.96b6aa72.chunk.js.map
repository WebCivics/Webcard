{"version":3,"sources":["components/DomainForm.js","components/ProfileView.js","App.js","reportWebVitals.js","index.js"],"names":["DomainForm","inputValue","setInputValue","useState","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","window","location","pathname","encodeURIComponent","htmlFor","id","type","value","onChange","target","placeholder","ProfileView","_ref","_profile$links","domain","profile","setProfile","loading","setLoading","error","setError","isEcashView","setIsEcashView","useEffect","URLSearchParams","search","has","async","_dohData$Answer","_dohData$Answer$find","dohResponse","fetch","headers","ok","Error","txtRecord","json","Answer","find","ans","data","replace","cidMatch","match","cid","ipfsResponse","turtleData","text","parser","N3","Parser","quads","Promise","resolve","reject","parse","err","quad","prefixes","message","push","_store$getObjects$","_store$getObjects$2","_store$getObjects$3","store","Store","FOAF","ADP","serviceMap","name","url","getObjects","img","eCashAddress","serviceLinks","property","usernameLiteral","genericLinks","map","link","URL","hostname","links","fetchProfile","href","JSON","stringify","src","alt","index","rel","PayButton","to","theme","colors","primary","secondary","tertiary","App","setDomain","potentialDomain","split","filter","Boolean","pop","toLowerCase","decodeURIComponent","onReset","handleReset","rootPath","includes","history","pushState","onDomainSubmit","submittedDomain","newPath","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96b6aa72.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n/**\r\n * DomainForm Component\r\n * Renders a simple form for the user to enter a domain name.\r\n * On submit, it reloads the page to the corresponding path.\r\n */\r\nfunction DomainForm() {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue) {\r\n      // Redirect the browser to the new URL to trigger the ProfileView\r\n      window.location.pathname = `/${encodeURIComponent(inputValue)}`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md text-center\">\r\n      <h1 className=\"text-4xl font-bold mb-2\">WebCard Viewer</h1>\r\n      <p className=\"text-gray-400 mb-6\">Enter a domain to look up its Agent Discovery Protocol (ADP) record.</p>\r\n      <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-2\">\r\n        <label htmlFor=\"domain-input\" className=\"sr-only\">Domain Name</label>\r\n        <input\r\n          id=\"domain-input\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          placeholder=\"sailingdigital.com\"\r\n          className=\"flex-grow bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors\"\r\n        >\r\n          Look Up\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DomainForm;","import React, { useState, useEffect } from 'react';\r\nimport N3 from 'n3';\r\nimport { PayButton } from '@paybutton/react';\r\n\r\n/**\r\n * ProfileView Component\r\n * This is the core of the application. It takes a domain, fetches the data,\r\n * parses it, and renders the profile card or an error/loading state.\r\n */\r\nfunction ProfileView({ domain }) {\r\n    const [profile, setProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [isEcashView, setIsEcashView] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Check for ?ecash query parameter in the URL\r\n        const queryParams = new URLSearchParams(window.location.search);\r\n        if (queryParams.has('ecash')) {\r\n            setIsEcashView(true);\r\n        }\r\n\r\n        const fetchProfile = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(null);\r\n\r\n                // Step 1: Use DNS-over-HTTPS (DoH) to get the TXT record for _adp.<domain>\r\n                const dohResponse = await fetch(`https://cloudflare-dns.com/dns-query?name=_adp.${domain}&type=TXT`, {\r\n                    headers: { 'accept': 'application/dns-json' },\r\n                });\r\n                if (!dohResponse.ok) throw new Error('DNS query failed. Check the domain and network connection.');\r\n                \r\n                const dohData = await dohResponse.json();\r\n                const txtRecord = dohData.Answer?.find(ans => ans.type === 16)?.data.replace(/\"/g, '');\r\n                if (!txtRecord) throw new Error(`No ADP TXT record found for ${domain}.`);\r\n\r\n                // Step 2: Extract the IPFS Content Identifier (CID) from the TXT record\r\n                const cidMatch = txtRecord.match(/ipfs=([a-zA-Z0-9]+)/);\r\n                if (!cidMatch || !cidMatch[1]) throw new Error('Could not find a valid IPFS CID in the TXT record.');\r\n                const cid = cidMatch[1];\r\n\r\n                // Step 3: Fetch the profile data from a public IPFS gateway\r\n                const ipfsResponse = await fetch(`https://ipfs.io/ipfs/${cid}`);\r\n                if (!ipfsResponse.ok) throw new Error('Failed to fetch data from IPFS gateway.');\r\n                const turtleData = await ipfsResponse.text();\r\n\r\n                // Step 4: Parse the Turtle (RDF) data using N3.js\r\n                const parser = new N3.Parser();\r\n                const quads = [];\r\n                await new Promise((resolve, reject) => {\r\n                    parser.parse(turtleData, (err, quad, prefixes) => {\r\n                        if (err) return reject(new Error(`RDF Parsing Error: ${err.message}`));\r\n                        if (quad) {\r\n                            quads.push(quad);\r\n                        } else {\r\n                            const store = new N3.Store(quads);\r\n                            const FOAF = 'http://xmlns.com/foaf/0.1/';\r\n                            const ADP = 'https://webcivics.github.io/adp/ontdev/adp#';\r\n                            \r\n                            const serviceMap = {\r\n                                'hasTwitterAccount': { name: 'Twitter', url: 'https://twitter.com/' },\r\n                                'hasLinkedinAccount': { name: 'LinkedIn', url: 'https://www.linkedin.com/in/' },\r\n                                'hasGithubAccount': { name: 'GitHub', url: 'https://github.com/' },\r\n                            };\r\n                            \r\n                            const name = store.getObjects(null, `${FOAF}name`, null)[0]?.value;\r\n                            const img = store.getObjects(null, `${FOAF}img`, null)[0]?.id;\r\n                            const eCashAddress = store.getObjects(null, `${ADP}hasEcashAccount`, null)[0]?.value;\r\n                            \r\n                            const serviceLinks = [];\r\n                            for (const property in serviceMap) {\r\n                                const usernameLiteral = store.getObjects(null, `${ADP}${property}`, null)[0];\r\n                                if (usernameLiteral) {\r\n                                    serviceLinks.push({\r\n                                        name: serviceMap[property].name,\r\n                                        url: `${serviceMap[property].url}${usernameLiteral.value}`\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            const genericLinks = store.getObjects(null, `${FOAF}page`, null).map(link => ({\r\n                                name: (() => { try { return new URL(link.id).hostname; } catch { return link.id; } })(),\r\n                                url: link.id\r\n                            }));\r\n\r\n                            setProfile({\r\n                                name,\r\n                                img,\r\n                                eCashAddress,\r\n                                links: [...serviceLinks, ...genericLinks]\r\n                            });\r\n                            resolve();\r\n                        }\r\n                    });\r\n                });\r\n\r\n            } catch (err) {\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchProfile();\r\n    }, [domain]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\r\n                <p>Fetching profile for <span className=\"font-bold\">{domain}</span>...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"bg-red-900 border border-red-500 text-red-200 px-4 py-3 rounded-md w-full max-w-lg text-center\">\r\n                <h2 className=\"font-bold text-lg mb-2\">Error</h2>\r\n                <p>{error}</p>\r\n                <a href=\"/\" className=\"inline-block bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md mt-4 transition-colors\">\r\n                    Try Again\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!profile) {\r\n        return <div className=\"text-center\"><p>Could not load profile data.</p></div>;\r\n    }\r\n    \r\n    if (isEcashView) {\r\n        return (\r\n            <pre className=\"bg-gray-800 p-4 rounded-md w-full max-w-lg whitespace-pre-wrap break-all text-left\">\r\n                {JSON.stringify({ eCashAddress: profile.eCashAddress || null }, null, 2)}\r\n            </pre>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-gray-800 shadow-lg rounded-lg p-6 w-full max-w-md text-center animate-fade-in\">\r\n            {profile.img && <img src={profile.img} alt={profile.name} className=\"w-24 h-24 rounded-full mx-auto mb-4 border-4 border-gray-700 object-cover\" />}\r\n            <h1 className=\"text-2xl font-bold\">{profile.name || 'No Name Found'}</h1>\r\n            <div className=\"mt-6 w-full flex flex-col gap-4\">\r\n                {profile.links?.map((link, index) => (\r\n                    <a key={index} href={link.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"bg-gray-700 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-md transition-colors w-full\">\r\n                        {link.name}\r\n                    </a>\r\n                ))}\r\n            </div>\r\n            {profile.eCashAddress && (\r\n                <div className=\"mt-6\">\r\n                    <PayButton\r\n                        to={profile.eCashAddress}\r\n                        text=\"Tip with eCash\"\r\n                        theme={{\r\n                            colors: {\r\n                                primary: '#0ea5e9',\r\n                                secondary: '#334155',\r\n                                tertiary: 'white',\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileView;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DomainForm from './components/DomainForm';\nimport ProfileView from './components/ProfileView';\n\n/**\n * Main App Component\n * This component now manages the view (form or profile) using internal state\n * to avoid full-page reloads that break GitHub Pages routing.\n */\nfunction App() {\n  const [domain, setDomain] = useState('');\n\n  // This effect still runs once on mount to handle direct links\n  useEffect(() => {\n    const path = window.location.pathname;\n    // This logic gets the last part of the URL path, which will be the domain\n    const potentialDomain = path.split('/').filter(Boolean).pop();\n\n    if (potentialDomain) {\n      // A simple check to avoid treating the repo name ('Webcard') as a domain\n      if (potentialDomain.toLowerCase() !== 'webcard') {\n        setDomain(decodeURIComponent(potentialDomain));\n      }\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  // This handler is passed to the DomainForm to update the state\n  const handleDomainSubmit = (submittedDomain) => {\n    // Update the state to show the ProfileView\n    setDomain(submittedDomain);\n    // Optionally, update the URL without reloading the page\n    const basename = window.location.pathname.includes('/Webcard') ? '/Webcard' : '';\n    const newPath = `${basename}/${encodeURIComponent(submittedDomain)}`;\n    window.history.pushState({ domain: submittedDomain }, '', newPath);\n  };\n\n  // This handler is passed to the ProfileView to allow resetting the app\n  const handleReset = () => {\n    setDomain('');\n    const basename = window.location.pathname.includes('/Webcard') ? '/Webcard' : '';\n    const rootPath = `${basename}/`;\n    window.history.pushState({}, '', rootPath);\n  };\n\n  return (\n    <div className=\"bg-gray-900 min-h-screen flex flex-col items-center justify-center text-white font-sans p-4\">\n      {domain ? (\n        <ProfileView domain={domain} onReset={handleReset} />\n      ) : (\n        <DomainForm onDomainSubmit={handleDomainSubmit} />\n      )}\n       <footer className=\"absolute bottom-4 text-gray-500 text-sm\">\n        Built with the assistance of an AI assistant.\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // This file contains the Tailwind CSS directives\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Using the render method for React 17, which is installed by react-scripts@4.0.3\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}