{"version":3,"sources":["components/DomainForm.js","components/ProfileView.js","App.js","reportWebVitals.js","index.js"],"names":["DomainForm","_ref","onDomainSubmit","inputValue","setInputValue","useState","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","htmlFor","id","type","value","onChange","target","placeholder","ProfileView","_profile$links","domain","onReset","profile","setProfile","loading","setLoading","error","setError","isEcashView","setIsEcashView","useEffect","queryParams","URLSearchParams","window","location","search","has","async","_dohData$Answer","_dohData$Answer$find","dohResponse","fetch","headers","ok","Error","txtRecord","json","Answer","find","ans","data","replace","cidMatch","match","cid","ipfsResponse","turtleData","text","parser","N3","Parser","quads","Promise","resolve","reject","parse","err","quad","message","push","_store$getObjects$","_store$getObjects$2","_store$getObjects$3","store","Store","FOAF","ADP","serviceMap","name","url","getObjects","img","eCashAddress","serviceLinks","property","usernameLiteral","genericLinks","map","link","URL","hostname","links","fetchProfile","onClick","JSON","stringify","src","alt","index","href","rel","App","setDomain","domainFromQuery","get","handleReset","baseUrl","pathname","submittedDomain","newUrl","encodeURIComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.238dfc5d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction DomainForm({ onDomainSubmit }) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue) {\r\n      onDomainSubmit(inputValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md text-center\">\r\n      <h1 className=\"text-4xl font-bold mb-2\">WebCard Viewer</h1>\r\n      <p className=\"text-gray-400 mb-6\">Enter a domain to look up its Agent Discovery Protocol (ADP) record.</p>\r\n      <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-2\">\r\n        <label htmlFor=\"domain-input\" className=\"sr-only\">Domain Name</label>\r\n        <input\r\n          id=\"domain-input\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          placeholder=\"sailingdigital.com\"\r\n          className=\"flex-grow bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors\"\r\n        >\r\n          Look Up\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DomainForm;","import React, { useState, useEffect } from 'react';\r\nimport N3 from 'n3';\r\n\r\nfunction ProfileView({ domain, onReset }) {\r\n  const [profile, setProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isEcashView, setIsEcashView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    setIsEcashView(queryParams.has('ecash'));\r\n\r\n    const fetchProfile = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      setProfile(null);\r\n\r\n      try {\r\n        const dohResponse = await fetch(`https://cloudflare-dns.com/dns-query?name=_adp.${domain}&type=TXT`, {\r\n          headers: { 'accept': 'application/dns-json' },\r\n        });\r\n        if (!dohResponse.ok) throw new Error('DNS query failed. Check the domain and network connection.');\r\n\r\n        const dohData = await dohResponse.json();\r\n        const txtRecord = dohData.Answer?.find(ans => ans.type === 16)?.data.replace(/\"/g, '');\r\n        if (!txtRecord) throw new Error(`No ADP TXT record found for ${domain}.`);\r\n\r\n        const cidMatch = txtRecord.match(/ipfs=([a-zA-Z0-9]+)/);\r\n        if (!cidMatch || !cidMatch[1]) throw new Error('Could not find a valid IPFS CID in the TXT record.');\r\n        const cid = cidMatch[1];\r\n\r\n        const ipfsResponse = await fetch(`https://ipfs.io/ipfs/${cid}`);\r\n        if (!ipfsResponse.ok) throw new Error('Failed to fetch data from IPFS gateway.');\r\n        const turtleData = await ipfsResponse.text();\r\n\r\n        const parser = new N3.Parser();\r\n        const quads = [];\r\n        await new Promise((resolve, reject) => {\r\n          parser.parse(turtleData, (err, quad) => {\r\n            if (err) return reject(new Error(`RDF Parsing Error: ${err.message}`));\r\n            if (quad) {\r\n              quads.push(quad);\r\n            } else {\r\n              const store = new N3.Store(quads);\r\n              const FOAF = 'http://xmlns.com/foaf/0.1/';\r\n              const ADP = 'https://webcivics.github.io/adp/ontdev/adp#';\r\n\r\n              const serviceMap = {\r\n                'hasTwitterAccount': { name: 'Twitter', url: 'https://twitter.com/' },\r\n                'hasLinkedinAccount': { name: 'LinkedIn', url: 'https://www.linkedin.com/in/' },\r\n                'hasGithubAccount': { name: 'GitHub', url: 'https://github.com/' },\r\n              };\r\n\r\n              const name = store.getObjects(null, `${FOAF}name`, null)[0]?.value;\r\n              const img = store.getObjects(null, `${FOAF}img`, null)[0]?.id;\r\n              const eCashAddress = store.getObjects(null, `${ADP}hasEcashAccount`, null)[0]?.value;\r\n\r\n              const serviceLinks = [];\r\n              for (const property in serviceMap) {\r\n                const usernameLiteral = store.getObjects(null, `${ADP}${property}`, null)[0];\r\n                if (usernameLiteral) {\r\n                  serviceLinks.push({\r\n                    name: serviceMap[property].name,\r\n                    url: `${serviceMap[property].url}${usernameLiteral.value}`\r\n                  });\r\n                }\r\n              }\r\n\r\n              const genericLinks = store.getObjects(null, `${FOAF}page`, null).map(link => ({\r\n                name: (() => { try { return new URL(link.id).hostname; } catch { return link.id; } })(),\r\n                url: link.id\r\n              }));\r\n\r\n              setProfile({\r\n                name,\r\n                img,\r\n                eCashAddress,\r\n                links: [...serviceLinks, ...genericLinks]\r\n              });\r\n              resolve();\r\n            }\r\n          });\r\n        });\r\n\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProfile();\r\n  }, [domain]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\r\n        <p>Fetching profile for <span className=\"font-bold\">{domain}</span>...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-900 border border-red-500 text-red-200 px-4 py-3 rounded-md w-full max-w-lg text-center\">\r\n        <h2 className=\"font-bold text-lg mb-2\">Error</h2>\r\n        <p>{error}</p>\r\n        <button\r\n          onClick={onReset}\r\n          className=\"inline-block bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md mt-4 transition-colors\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!profile) {\r\n    return <div className=\"text-center\"><p>Could not load profile data.</p></div>;\r\n  }\r\n\r\n  if (isEcashView) {\r\n    return (\r\n      <pre className=\"bg-gray-800 p-4 rounded-md w-full max-w-lg whitespace-pre-wrap break-all text-left\">\r\n        {JSON.stringify({ eCashAddress: profile.eCashAddress || null }, null, 2)}\r\n      </pre>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-gray-800 shadow-lg rounded-lg p-6 w-full max-w-md text-center animate-fade-in\">\r\n      {profile.img && <img src={profile.img} alt={profile.name} className=\"w-24 h-24 rounded-full mx-auto mb-4 border-4 border-gray-700 object-cover\" />}\r\n      <h1 className=\"text-2xl font-bold\">{profile.name || 'No Name Found'}</h1>\r\n      <div className=\"mt-6 w-full flex flex-col gap-4\">\r\n        {profile.links?.map((link, index) => (\r\n          <a key={index} href={link.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"bg-gray-700 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-md transition-colors w-full\">\r\n            {link.name}\r\n          </a>\r\n        ))}\r\n      </div>\r\n      {profile.eCashAddress && (\r\n        <div className=\"mt-6\">\r\n          <p className=\"text-gray-400\">eCash Address: {profile.eCashAddress}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileView;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DomainForm from './components/DomainForm';\nimport ProfileView from './components/ProfileView';\n\nfunction App() {\n  const [domain, setDomain] = useState('');\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const domainFromQuery = queryParams.get('domain');\n    if (domainFromQuery) {\n      setDomain(domainFromQuery);\n    }\n  }, []);\n\n  const handleDomainSubmit = (submittedDomain) => {\n    const baseUrl = window.location.pathname;\n    const newUrl = `${baseUrl}?domain=${encodeURIComponent(submittedDomain)}`;\n    window.location.href = newUrl;\n  };\n\n  const handleReset = () => {\n    const baseUrl = window.location.pathname;\n    window.location.href = baseUrl;\n  };\n\n  return (\n    <div className=\"bg-gray-900 min-h-screen flex flex-col items-center justify-center text-white font-sans p-4\">\n      {domain ? (\n        <ProfileView domain={domain} onReset={handleReset} />\n      ) : (\n        <DomainForm onDomainSubmit={handleDomainSubmit} />\n      )}\n      <footer className=\"absolute bottom-4 text-gray-500 text-sm\">\n        Built with the assistance of an AI assistant.\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // This file contains the Tailwind CSS directives\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Using the render method for React 17, which is installed by react-scripts@4.0.3\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}